# --------------------------------------------#
uniform_all = as.data.frame(uniform_all)
aus_garchcop_roll_01 = ugarchroll(egarch_spec, data = uniform_all$z_aus, n.ahead = 1, n.start = 2229,
refit.window = "moving", refit.every = 10, calculate.VaR = TRUE,
VaR.alpha = 0.01)
# alpha 5%
aus_garchcop_roll_05 = ugarchroll(egarch_spec, data = uniform_all$z_aus, n.ahead = 1, n.start = 2229,
refit.window = "moving", refit.every = 10, calculate.VaR = TRUE,
VaR.alpha = 0.05)
# alpha 10%
aus_garchcop_roll_1 = ugarchroll(egarch_spec, data = uniform_all$z_aus, n.ahead = 1, n.start = 2229,
refit.window = "moving", refit.every = 10, calculate.VaR = TRUE,
VaR.alpha = 0.1)
report(aus_garchcop_roll_01, type ="VaR", VaR.alpha = 0.01)
report(aus_garchcop_roll_05, type ="VaR", VaR.alpha = 0.05) # fro alpha 1%
report(aus_garchcop_roll_1, type ="VaR", VaR.alpha = 0.1) # for alpha 10%
aus_actual_cop_var = aus_garchcop_roll_01@forecast$VaR[,2]
aus_fore_cop_var01 = aus_garchcop_roll_01@forecast$VaR[,1]
aus_fore_cop_var05 = aus_garchcop_roll_05@forecast$VaR[,1]
aus_fore_cop_var1 = aus_garchcop_roll_1@forecast$VaR[,1]
plot(dates, aus_actual_cop_var, type = "l", xlab = "Day", ylab = "Australia", ylim = c(-0.5,1))
lines(dates, aus_fore_cop_var01, col = "red")
lines(dates, aus_fore_cop_var05, col = "blue")
lines(dates, aus_fore_cop_var1, col = "purple")
legend("topright", legend = c("Daily Return", "99% VaR", "95% VaR", "90% VaR"),
col = c("black", "red", "blue", "purple"), pch = 19)
library(rvest)
library(dplyr)
library(lubridate)
region <- c("nsw", "vic", "wa")
base_link <- "https://covidlive.com.au/report/daily-cases/"
for (i in region){
link2 = (paste(base_link, i, sep=''))
col_page = read_html(link2)
col_table[[i]] = col_page %>% html_nodes("table.DAILY-CASES") %>% html_table() #%>% .[[1]]
}
region <- c("nsw", "vic", "wa")
base_link <- "https://covidlive.com.au/report/daily-cases/"
col_table <- c()
for (i in region){
link2 = (paste(base_link, i, sep=''))
col_page = read_html(link2)
col_table[[i]] = col_page %>% html_nodes("table.DAILY-CASES") %>% html_table() #%>% .[[1]]
}
View(col_table)
col_table[["nsw"]][[1]]
col_table[[1]]
col_table[["vic"]]
col_tabble[[2]]
col_table[[2]]
col_table <- c()
for (i in region){
link2 = (paste(base_link, i, sep=''))
col_page = read_html(link2)
col_table[[i]] = col_page %>% html_nodes("table.DAILY-CASES") %>% html_table() %>% .[[1]]
}
View(col_table)
library(rvest) # scraping
library(dplyr)# data manipulation
library(lubridate) # converrt type to date
region <- c("nsw", "vic", "wa")
base_link <- "https://covidlive.com.au/report/daily-cases/"
col_table <- c()
for (i in region){
link2 = (paste(base_link, i, sep=''))
col_page = read_html(link2)
col_table[[i]] = col_page %>% html_nodes("table.DAILY-CASES") %>% html_table() %>% .[[1]] # store as dataframe
}
nsw_daily_cases <- col_table[[1]]
vic_daily_cases <- col_table[[2]]
wa_daily_cases <- col_table[[3]]
View(nsw_daily_cases)
# convert character type data into
nsw_daily_cases$DATE <- parse_date_time2(nsw_daily_cases$DATE, orders = "dmy")
nsw_daily_cases$DATE <- as.Date(nsw_daily_cases$DATE, orders = "%Y-%m-%d")
vic_daily_cases$DATE <- parse_date_time2(vic_daily_cases$DATE, orders = "dmy")
vic_daily_cases$DATE <- as.Date(vic_daily_cases$DATE, orders = "%Y-%m-%d")
wa_daily_cases$DATE <- parse_date_time2(wa_daily_cases$DATE, orders = "dmy")
wa_daily_cases$DATE <- as.Date(wa_daily_cases$DATE, orders = "%Y-%m-%d")
nsw_daily_cases <- nsw_daily_cases %>%
arrange(DATE)
vic_daily_cases <- vic_daily_cases %>%
arrange(DATE)
wa_daily_cases <- wa_daily_cases %>%
arrange(DATE)
nsw_daily_cases <- nsw_daily_cases[-885,]
vic_daily_cases <- vic_daily_cases[-885,]
wa_daily_cases <- wa_daily_cases[-885,]
nsw_daily_cases$NEW <- as.numeric(gsub(",","",nsw_daily_cases$NEW))
vic_daily_cases$NEW <- as.numeric(gsub(",","",vic_daily_cases$NEW))
wa_daily_cases$NEW <- as.numeric(gsub(",","",wa_daily_cases$NEW))
# Check Missing Values
sum(is.na(nsw_daily_cases$NEW))
sum(is.na(vic_daily_cases$NEW))
sum(is.na(wa_daily_cases$NEW))
View(vic_daily_cases)
View(wa_daily_cases)
nsw_daily_cases[is.na(nsw_daily_cases)] <-3
vic_daily_cases[is.na(vic_daily_cases)] <-1
wa_daily_cases[is.na(wa_daily_cases)] <-0
nsw_daily_cases <- nsw_daily_cases[,1:2] %>%
mutate(
Total_Cases = cumsum(NEW)
)
vic_daily_cases <- vic_daily_cases[,1:2] %>%
mutate(
Total_Cases = cumsum(NEW)
)
wa_daily_cases <- wa_daily_cases[,1:2] %>%
mutate(
Total_Cases = cumsum(NEW)
)
df <- read.csv("/Users/cindybtari/Downloads/SmartPLS Project2/DATA.csv")
df2 <- read.csv("/Users/cindybtari/Downloads/SmartPLS Project2/DATA.csv")
View(df2)
df3 <- df2[-c(1:16)]
View(df3)
ncol(df3)
dat <- read.csv("/Users/cindybtari/Downloads/upwork.csv")
View(dat)
ncol(dat)
for (i in 1:ncol(dat)){
x = dat[,i]
hist(x,
main = paste("Variable", i),
xlab ="value"
)
}
for (i in 1:ncol(dat)){
x = dat[,i]
plot(x,
main = paste("Variable", i),
xlab ="value"
)
}
for (i in 1:ncol(dat)){
x = dat[,i]
hist(x,
main = paste("Variable", i),
xlab ="value"
)
}
for (i in 1:ncol(dat)){
x = dat[,i]
hist(x,
main = paste("Variable", colnames(i)),
xlab ="value"
)
}
for (i in 1:ncol(dat)){
x = dat[,i]
hist(x,
main = paste("Variable", i,
xlab ="value"
)
}
for (i in 1:ncol(dat)){
x = dat[,i]
hist(x,
main = paste("Variable", i),
xlab ="value"
)
}
x <- read_csv(~/case_per_pop_df.csv)
pac <- c("koRpus", "lsa", "OpenNLP", "Quanteda","RWeka","Spacyr","Stringr","Text2vec",
"TM", "Wordcloud")
install.packages(pac)
library(dplyr)
library(tidytext)
library(stringr)
library(tidyr)
library(wordcloud)
data <- read_csv("/Users/cindybtari/Downloads/products_list.csv")
library(readr)
data <- read_csv("/Users/cindybtari/Downloads/products_list.csv")
head(data)
sum(is.na(data))
names(data)[names(data) == "Category Level 1"]      <- "Category_Level_1"
View(data)
data %>% count(Category_Level_1) %>%
arrange(desc(n))
names(data)[names(data) == "Level 2"]      <- "Level_2"
names(data)[names(data) == "Level 3"]      <- "Level_3"
data %>% count(Level_2) %>%
arrange(desc(n))
data %>% count(Level_3) %>%
arrange(desc(n))
library(tm)
avg_stars_per_business_id <- data %>%
group_by(Category_Level_1) %>%
summarize(avg_stars = mean(PartNo),
n = n()) %>%
arrange(desc(n))
View(avg_stars_per_business_id)
data %>%
group_by(Level_2) %>%
summarize(avg_stars = mean(PartNo),
n = n()) %>%
arrange(desc(n))
review_clean <- data %>%
unnest_tokens(Description, text) %>%
anti_join(stop_words)
cleaned_text <- data %>%
filter(str_detect(Description, "^[^>]+[A-Za-z\\d]") | Description !="")
View(cleaned_text)
review_clean <- data %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words)
View(review_clean)
data %>%
unnest_tokens(word, Description) %>%
data %>%
unnest_tokens(word, Description)
trty<-data %>%
unnest_tokens(word, Description)
View(trty)
library(readr)
library(dplyr)
library(tidytext)
library(tm)
data = read_csv("/Users/cindybtari/Downloads/products_list.csv")
View(data)
head(data)
nrow(data)
ncol(data)
unique(data[,1])
unique(data[,2])
sum(unique(data[,2]))
count(unique(data[,2]))
df2 <- data %>%
filter(data[,2] == "Steel Wire Rope")
View(df2)
df3 <- data[,2] %>%
filter(data[,2] == "Steel Wire Rope")
View(df3)
df4<- data[,3] %>%
filter(data[,2] == "Steel Wire Rope")
df4
View(df4)
count <- data %>$ count(data[,2]) %>% arrange(desc(n))
count <- data %>%count(data[,2]) %>% arrange(desc(n))
count
pie(count)
pie(count$n)
pie(count$n, labels = count$`Level 2`)
plot(count$n, labels = count$`Level 2`)
hist(count$n, labels = count$`Level 2`)
hist(count$n, labels = count$`Level 2`, ylab = "n", xlab = "level2")
barplot(ount$n, labels = count$`Level 2`, ylab = "n", xlab = "level2")
barplot(count$n, labels = count$`Level 2`, ylab = "n", xlab = "level2")
barplot(count$n, labels = count$`Level 2`, ylab = "n", xlab = "level 2")
v1 <- c(735, 894, 243)
v2 <- c(125, 722, 2061)
v1+v2
?read.csv
info(col_page)
describe(data_new)
?info
str(data_new)
mean(v1,v2)
mean(c(v1, v2), na.rm = T)
mean(v1, v2, na.rm = T)
boxplot(data_new$Australia)
plot(data_new$Australia, type = ‘box’)
install.packages("deephit")
install.packages("survivalmodels")
help(survivalmodels)
??survivalmodels
help(deephit)
??deephit
options(repos=c(
mlrorg = 'https://mlr-org.r-universe.dev',
raphaels1 = 'https://raphaels1.r-universe.dev',
CRAN = 'https://cloud.r-project.org'
))
install.packages(c("ggplot2", "mlr3benchmark", "mlr3pipelines", "mlr3proba", "mlr3tuning",
"survivalmodels", "mlr3extralearners"))
library(survivalmodels)
install_pycox(pip = T, install_torch = T)
install.packages("reticulate")
install_pycox(pip = T, install_torch = T)
Y
library(readr)
data <- read_csv("Downloads/survival analysis/data.csv")
View(data)
install_pycox(pip = T, install_torch = T)
install_keras(pip = TRUE, install_tensorflow = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(survivalmodels)
library(readxl)
head(data, 10)
type(data)
info(data)
str(data)
summary(data)
unique(data$race)
unique(data$marital_status)
unique(data$ethnicity)
head(data)
data[, c('sex', 'race', 'ethnicity', 'marital_status', 'reason_yob_missing')] = sapply(data[, c('sex', 'race', 'ethnicity', 'marital_status', 'reason_yob_missing')], unclass)
head(data)
data[, c('sex', 'race', 'ethnicity', 'marital_status', 'reason_yob_missing')] = sapply(data[, c('sex', 'race', 'ethnicity', 'marital_status', 'reason_yob_missing')], unclass)
data[, c('sex', 'race', 'ethnicity', 'marital_status', 'reason_yob_missing')] <- sapply(data[, c('sex', 'race', 'ethnicity', 'marital_status', 'reason_yob_missing')], as.factor)
data$sex <- as.factor(data$sex)
View(data)
library(magrittr)
data %<>% mutate_at(col, factor)
library(magrittr)
library(survivalmodels)
data %>% mutate_at(col, factor)
library(magrittr)
library(readr)
library(readxl)
library(tidyverse)
library(corrplot)
library(MASS)
library(mvtnorm)
library(MVN)
library(psych)
library(ggfortify)
library(ggpubr)
library(mvoutlier)
library(heplots)
library(biotools)
library(emmeans)
library(jmv)
library(vegan)
setwd("~/Downloads/pca project/MANOVA_project")
travel <- read_excel("data_manova.xlsx")
head(travel)
# First, drop two first rows. Next, filter only data that has 100 in progress
travel <- travel %>%
slice(-c(1,2))
# Select used columns
travel_df <- travel[c(5,6,9,12,13,14)]
View(travel_df)
# CHECK MISSING VALUE----
# Count the missing values by column wise
print("Count of missing values by column wise")
sapply(travel_df, function(x) sum(is.na(x)))
# Missing value imputation
# Since our data contains 46 missing value, let's impute with mode
# Function to see mode
calc_mode <- function(x){
# List the distinct / unique values
distinct_values <- unique(na.omit(x))
# Count the occurrence of each distinct value
distinct_tabulate <- tabulate(match(x, distinct_values))
# Return the value with the highest occurrence
distinct_values[which.max(distinct_tabulate)]
}
# Impute missing value----
travel_df <- travel_df %>%
mutate(across(everything(), ~replace_na(.x, calc_mode(.x))))
# Rename column name
travel_df_clean <- travel_df %>%
rename(travel_frequency = 1, checkin_exp = 2,
fly_exp = 3, gender = 4, race=5,
religion = 6)
head(travel_df_clean)
View(travel_df)
# CONVERT DATA TYPE----
# Convert all variables into integer
# Convert column 2 to 6 to numeric
travel_df_clean[,1:3] <- lapply(travel_df_clean[,1:3], as.numeric)
travel_df_clean[,4:6] <- lapply(travel_df_clean[,4:6], as.factor)
head(travel_df_clean)
interaction.plot(
x.factor = travel_df_clean$race,
trace.factor = travel_df_clean$gender,
response = travel_df_clean$checkin_exp,
type="b", col=c(1:4),
ylab = "Checkin Experience Rate",
xlab = "Races",
trace.label = "Gender",
main="Interaction Plot",
leg.bty="o", leg.bg="beige", lwd=2,
)
interaction.plot(
x.factor = travel_df_clean$religion,
trace.factor = travel_df_clean$gender,
response = travel_df_clean$checkin_exp,
type="b", col=c(1:4),
ylab = "Checkin Experience Rate",
xlab = "Religion",
trace.label = "Gender",
main="Interaction Plot",
leg.bty="o", leg.bg="beige", lwd=2,
)
interaction.plot(
x.factor = travel_df_clean$religion,
trace.factor = travel_df_clean$race,
response = travel_df_clean$checkin_exp,
type="b", col=c(1:8),
ylab = "Checkin Experience Rate",
xlab = "Religion",
trace.label = "Race",
main="Interaction Plot",
leg.bty="o", leg.bg="beige", lwd=2
)
interaction.plot(
x.factor = travel_df_clean$race,
trace.factor = travel_df_clean$gender,
response = travel_df_clean$fly_exp,
type="b", col=c(1:4),
ylab = "fly Claim Experience Rate",
xlab = "Races",
trace.label = "Gender",
main="Interaction Plot",
leg.bty="o", leg.bg="beige", lwd=2,
)
interaction.plot(
x.factor = travel_df_clean$race,
trace.factor = travel_df_clean$gender,
response = travel_df_clean$fly_exp,
type="b", col=c(1:4),
ylab = "Flight Experience Rate",
xlab = "Races",
trace.label = "Gender",
main="Interaction Plot",
leg.bty="o", leg.bg="beige", lwd=2,
)
interaction.plot(
x.factor = travel_df_clean$religion,
trace.factor = travel_df_clean$gender,
response = travel_df_clean$fly_exp,
type="b", col=c(1:4),
ylab = "fly Claim Experience Rate",
xlab = "Religion",
trace.label = "Gender",
main="Interaction Plot",
leg.bty="o", leg.bg="beige", lwd=2,
)
interaction.plot(
x.factor = travel_df_clean$religion,
trace.factor = travel_df_clean$gender,
response = travel_df_clean$fly_exp,
type="b", col=c(1:4),
ylab = "Flight Experience Rate",
xlab = "Religion",
trace.label = "Gender",
main="Interaction Plot",
leg.bty="o", leg.bg="beige", lwd=2,
)
interaction.plot(
x.factor = travel_df_clean$religion,
trace.factor = travel_df_clean$race,
response = travel_df_clean$fly_exp,
type="b", col=c(1:8),
ylab = "Flight Experience Rate",
xlab = "Religion",
trace.label = "Race",
main="Interaction Plot",
leg.bty="o", leg.bg="beige", lwd=2
)
aov_1 <- aov(checkin_exp ~ gender * religion, data = travel_df_clean)
summary(aov_1)
aov_2 <- aov(fly_exp ~ gender * religion, data = travel_df_clean)
summary(aov_2)
aov_2 <- aov(fly_exp ~ gender * religion, data = travel_df_clean)
summary(aov_2)
aov_1_ <- aov(checkin_exp ~ gender * race, data = travel_df_clean)
summary(aov_1_)
aov_2_ <- aov(fly_exp ~ gender * race, data = travel_df_clean)
summary(aov_2_)
aov_1_1 <- aov(checkin_exp ~ religion * race, data = travel_df_clean)
summary(aov_1_1)
aov_1_2 <- aov(fly_exp ~ religion * race, data = travel_df_clean)
summary(aov_1_2)
manova1 <- manova(cbind(checkin_exp, fly_exp) ~ gender*race, data=travel_df_clean)
summary(manova1)
summary.aov(manova1)
manova2 <- manova(cbind(checkin_exp, fly_exp) ~ gender*religion, data=travel_df_clean)
summary(manova2)
summary.aov(manova2)
manova3 <- manova(cbind(checkin_exp, fly_exp) ~ race*religion, data=travel_df_clean)
summary(manova3)
summary.aov(manova3)
summary(manova3,
test = "Pillai")
summary(manova3,
test = "Wilks")
summary(manova3,
test = "Hotelling-Lawley")
summary(manova3,
test = "Roy")
M <- lm(cbind(checkin_exp, fly_exp) ~ race + religion, data = travel_df_clean)
anova(M)
mvpaircomp(M, factor1 = "race")
MOats.lm <- lm(cbind(checkin_exp, fly_exp) ~ race + religion, data = travel_df_clean)
MOats.emm <- emmeans(MOats.lm, ~ race| rep.meas)
mvcontrast(MOats.emm, "consec", show.ests = TRUE)
MOats.lm2 <- lm(cbind(checkin_exp, fly_exp) ~ race + religion, data = travel_df_clean)
MOats.emm2 <- emmeans(MOats.lm, ~ religion| rep.meas)
mvcontrast(MOats.emm2, "consec", show.ests = TRUE)
results <- mancova(data = travel_df_clean,
deps = vars(checkin_exp, fly_exp),
factors = vars(race, religion),
covs = travel_frequency,
multivar = list("pillai", "wilks", "hotel", "roy"), boxM = T,
shapiro = T, qqPlot = T)
results$multivar
results$univar
results$assump$boxM
results$assump$shapiro
results$assump$qqPlot
y <- as.matrix(travel_df_clean[,2:3])
y_mat <- sqrt(y) # square root transformation
y_dist <- vegdist(y_mat)
set.seed(123)
mrpp <- adonis2(y_dist~ travel_df_clean$race * travel_df_clean$religion, permutations = 1000)
mrpp
